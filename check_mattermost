#!/bin/sh
#------------------------------------------------------------------------------
# Check Mattermost Version
#------------------------------------------------------------------------------
# Nagios/Icinga2 plugin to check the version of a running Mattermost instance
# for available updates.
# The currently runnung version is determined by the "X-Version-Id" HTTP header
# sent by Mattermost. Available updates are determined from release branches of
# the public Mattermost Community Edition server Git repository at GitHub:
# https://github.com/mattermost/mattermost-server.git
# This plugin requires Git and Wget or Curl.
#------------------------------------------------------------------------------
# Usage:
#   check_mattermost [ -u <url> ] [-p|--patch] [-h|--help] [-V|--version]
# Options/switches:
#   -u <url>               URL to the Mattermost instance.
#   -p / --patch           Warn on patch version updates. This also checks
#                          patch version tags, but may cause false warnings,
#                          as patch versions are not always properly included
#                          in Mattermost release version strings.
#   -h / --help            Display help.
#   -V / --version         Display version.
# Examples:
#   check_mattermost -u https://mattermost.example.com
#------------------------------------------------------------------------------

readonly INFO_AUTHOR="SHORELESS Limited <contact@shoreless.limited>"
readonly INFO_LICENSE="MIT"
readonly INFO_NAME="check_mattermost"
readonly INFO_DATE="2018-02-26"
readonly INFO_VERSION="1.0.0"

# Nagios error codes.
# http://nagios.sourceforge.net/docs/3_0/pluginapi.html
readonly EXIT_OK=0
readonly EXIT_WARN=1
readonly EXIT_ERR=2
readonly EXIT_UNKNOWN=3

# This script requires Git. Check for Git binary.
if ! command -v git > /dev/null 2>&1 ; then
  printf "[UNKNOWN] Git not found.\n"
  exit $EXIT_UNKNOWN
fi
readonly GIT="$(command -v git)"

#------------------------------------------------------------------------------
# Print plugin description.
#------------------------------------------------------------------------------
# Globals:
#   INFO_VERSION
# Arguments:
#   None.
# Returns:
#   None.
#------------------------------------------------------------------------------
print_description() {
  printf "Check Mattermost Version (v%s)\n\n" "${INFO_VERSION}"
  printf "Nagios/Icinga2 plugin to check the version of a running Mattermost instance\nfor available updates.\n\n"
}

#------------------------------------------------------------------------------
# Print usage information.
#------------------------------------------------------------------------------
# Globals:
#   INFO_NAME
# Arguments:
#   None.
# Returns:
#   None.
#------------------------------------------------------------------------------
print_usage() {
  printf "Usage: %s [ -u <url> ] [-h|--help] [-V|--version]\n" "${INFO_NAME}"
  printf "       %s -u https://mattermost.example.com\n\n" "${INFO_NAME}"
  printf "Options/switches:\n"
  printf "  -u <url>               URL to the Mattermost instance.\n"
  printf "  -p / --patch           Warn on patch version updates. This also checks\n"
  printf "                         patch version tags, but may cause false warnings,\n"
  printf "                         as patch versions are not always properly included\n"
  printf "                         in Mattermost release version strings.\n"
  printf "  -h / --help            Display help.\n"
  printf "  -V / --version         Display version.\n"
}

#------------------------------------------------------------------------------
# Print plugin version information.
#------------------------------------------------------------------------------
# Globals:
#   INFO_NAME
#   INFO_VERSION
#   INFO_DATE
#   INFO_AUTHOR
#   INFO_LICENSE
# Arguments:
#   None.
# Returns:
#   None.
#------------------------------------------------------------------------------
print_version() {
  print_description
  printf "Version: %s %s (%s)\n" "${INFO_NAME}" "${INFO_VERSION}" "${INFO_DATE}"
  printf "Author:  %s\n" "${INFO_AUTHOR}"
  printf "License: %s\n" "${INFO_LICENSE}"
}

#------------------------------------------------------------------------------
# Print current Mattermost version used.
#------------------------------------------------------------------------------
# This function extracts the version number from the "X-Version-Id" header
# sent by the Mattermost instance. It tries using "curl -i" or "wget -S"
# to retrieve the headers.
#------------------------------------------------------------------------------
# Globals:
#   MATTERMOST_URL
# Arguments:
#   None.
# Returns:
#   None.
#------------------------------------------------------------------------------
get_mattermost_version() {
  if command -v curl >/dev/null 2>&1; then
    m_version="$(curl -i $MATTERMOST_URL 2>/dev/null | grep 'X-Version-Id' | grep -oE '([0-9]{1,}\.)+[0-9]{1,}')"
  elif command -v wget >/dev/null 2>&1; then
    m_version="$(wget -qS $MATTERMOST_URL 2>&1 | grep 'X-Version-Id' | grep -oE '([0-9]{1,}\.)+[0-9]{1,}')"
  fi
  echo "$m_version"
}

#------------------------------------------------------------------------------
# Check currently used version against releases in Git repository.
#------------------------------------------------------------------------------
# This function fetches the Git release branches from the GitHub
# mattermost-server repository and compares the current version returned by
# get_mattermost_version() with the release branch names of the remote
# repository.
#------------------------------------------------------------------------------
# Globals:
#   GIT
#   CHECK_PATCH
#   EXIT_OK
#   EXIT_WARN
#   EXIT_ERR
# Arguments:
#   None.
# Returns:
#   Exit code.
#------------------------------------------------------------------------------
check_version() {
  # Current installed version
  m_version="$(get_mattermost_version)"

  if [ -z "$m_version" ]; then
    echo "Could not get the version of the Mattermost instance."
    exit "$EXIT_UNKNOWN"
  fi

  MATTERMOST_MAJOR="$(echo "$m_version" | awk -F'[.]' '{print $1}')"
  MATTERMOST_MINOR="$(echo "$m_version" | awk -F'[.]' '{print $2}')"
  MATTERMOST_PATCH="$(echo "$m_version" | awk -F'[.]' '{print $3}')"

  # Whether patch versions shall cause warnings.
  if [ ! -z "$CHECK_PATCH" ]; then
    # Get latest version from mattermost-server Git tags.
    MATTERMOST_LATEST="$($GIT ls-remote --tags https://github.com/mattermost/mattermost-server.git | grep -oE '([0-9]{1,}\.)+[0-9]{1,}$' | sort -t. -n -k1,1 -k2,2 -k3,3 -u -r | awk 'NR==1{print}')"
  else
    # Get latest version from mattermost-server release branches.
    MATTERMOST_LATEST="$($GIT ls-remote https://github.com/mattermost/mattermost-server.git | grep 'refs/heads/release' | grep -oE '([0-9]{1,}\.)+[0-9]{1,}$' | | grep -v 99.99 | sort -t. -n -k1,1 -k2,2 -k3,3 -u -r | awk 'NR==1{print}')"
  fi

  # Whether the version string is empty.
  if [ -z "$MATTERMOST_LATEST" ]; then
    # This should not happen if the repository is accessible.
    echo "No release version found online. Your version: $m_version"
    exit "$EXIT_UNKNOWN"
  fi

  MATTERMOST_LATEST_MAJOR="$(echo "$MATTERMOST_LATEST" | awk -F'[.]' '{print $1}')"
  MATTERMOST_LATEST_MINOR="$(echo "$MATTERMOST_LATEST" | awk -F'[.]' '{print $2}')"
  if [ ! -z "$CHECK_PATCH" ]; then
    MATTERMOST_LATEST_PATCH="$(echo "$MATTERMOST_LATEST" | awk -F'[.]' '{print $3}')"
  fi

  # Check Major version
  if [ "$MATTERMOST_LATEST_MAJOR" -gt "$MATTERMOST_MAJOR" ]; then
    echo "[CRITICAL] Mattermost Version $m_version too old. Latest: ${MATTERMOST_LATEST_MAJOR}.${MATTERMOST_LATEST_MINOR}"
    return "$EXIT_ERR"
  elif [ "$MATTERMOST_LATEST_MAJOR" -lt "$MATTERMOST_MAJOR" ]; then
    echo "[WARNING] Mattermost Version $m_version too new. Latest: ${MATTERMOST_LATEST_MAJOR}.${MATTERMOST_LATEST_MINOR}"
    return "$EXIT_WARN"
  elif [ "$MATTERMOST_LATEST_MINOR" = "$MATTERMOST_MINOR" ]; then
    # Check Minor version
    if [ "$MATTERMOST_LATEST_MINOR" -gt "$MATTERMOST_MINOR" ]; then
      echo "[CRITICAL] Mattermost Version $m_version too old. Latest: ${MATTERMOST_LATEST_MAJOR}.${MATTERMOST_LATEST_MINOR}"
      return "$EXIT_ERR"
    elif [ "$MATTERMOST_LATEST_MINOR" -lt "$MATTERMOST_MINOR" ]; then
      echo "[WARNING] Mattermost Version $m_version too new. Latest: ${MATTERMOST_LATEST_MAJOR}.${MATTERMOST_LATEST_MINOR}"
      return "$EXIT_WARN"
    elif [ "$MATTERMOST_LATEST_MINOR" = "$MATTERMOST_MINOR" ]; then
      # Whether to check patch versions.
      if [ ! -z "$CHECK_PATCH" ]; then
        if [ "$MATTERMOST_LATEST_PATCH" -gt "$MATTERMOST_PATCH" ]; then
          echo "[WARNING] Mattermost Version $m_version too old. Latest: ${MATTERMOST_LATEST_MAJOR}.${MATTERMOST_LATEST_MINOR}.${MATTERMOST_LATEST_PATCH}."
          return "$EXIT_WARN"
        elif [ "$MATTERMOST_LATEST_PATCH" = "$MATTERMOST_PATCH" ]; then
          echo "[OK] Mattermost Version $m_version up to date."
          return "$EXIT_OK"
        else
          echo "[WARNING] Mattermost Version $m_version too new. Latest: ${MATTERMOST_LATEST_MAJOR}.${MATTERMOST_LATEST_MINOR}.${MATTERMOST_LATEST_PATCH}"
          return "$EXIT_WARN"
        fi
      else
        echo "[OK] Mattermost Version $m_version up to date."
        return "$EXIT_OK"
      fi
    fi
  fi
}

#------------------------------------------------------------------------------
# Process arguments.
#------------------------------------------------------------------------------
# This function gets the remote instance URL from the command-line parameters.
#------------------------------------------------------------------------------
# Globals:
#   MATTERMOST_URL
#   CHECK_PATCH
#   SHOW_HELP
#   SHOW_VERSION
#   SHOW_UNKNOWN_ARG
# Arguments:
#   None.
# Returns:
#   None.
#------------------------------------------------------------------------------
parse_arguments() {
  while test -n "$1"; do
    case "$1" in
      # URL to the Mattermost instance.
      -u|--url)
        shift
        MATTERMOST_URL="$1"
        ;;
      # Check patch versions.
      -p|--patch)
        CHECK_PATCH="true"
        ;;
      # Show help/usage information.
      -h|--help)
        SHOW_HELP="true"
        break
        ;;
      # Show version information.
      -V|--version)
        SHOW_VERSION="true"
        break
        ;;
      *)
        SHOW_UNKNOWN_ARG="$1"
        break
        ;;
    esac
    shift
  done
}

#------------------------------------------------------------------------------
# Entry point.
#------------------------------------------------------------------------------
MATTERMOST_URL=""
CHECK_PATCH=""
SHOW_HELP=""
SHOW_VERSION=""
SHOW_UNKNOWN_ARG=""

parse_arguments "$@"

# Validate arguments.
if [ ! -z "$SHOW_HELP" ]; then
  print_description
  print_usage
  exit $EXIT_OK
elif [ ! -z "$SHOW_VERSION" ]; then
  print_version
  exit $EXIT_OK
elif [ ! -z "$SHOW_UNKNOWN_ARG" ]; then
  printf "Unknown argument: %s\n\n" "$SHOW_UNKNOWN_ARG"
  print_usage
  exit $EXIT_UNKNOWN
elif [ -z "$MATTERMOST_URL" ]; then
  echo "[UNKNOWN] - URL to Mattermost missing."
  exit "$EXIT_UNKNOWN"
fi

# Execute version check
MSG_UPDATE="$(check_version)"
TMP_EXIT="$?"

# Print results.
echo "$MSG_UPDATE"
exit "$TMP_EXIT"
